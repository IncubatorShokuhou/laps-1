#!@PERL@
# @configure_input@

# Looks in logdir (from command line) or $LAPS_DATA_ROOT/log.
# The other command line argument is the hour of the LAPS run
# if not current.  Both command line arguments are optional;
# order doesn't matter.

require '@prefix@/etc/which_bkgd.pm';

$nargs = @ARGV;
if ($nargs == 0) {}
elsif ($nargs == 1) {
 $arg = shift;
 if ($arg =~ /^[0-9]*$/) {$hr=$arg;}
 else {$logdir = $arg;}
 }
elsif ($nargs == 2) {
 $arg1 = shift;
 $arg2 = shift;
 if ($arg1 =~ /^[0-9]*$/) {$hr=$arg1; $logdir=$arg2;}
 else {$hr=$arg2; $logdir=$arg1;}
 }
 
$LAPS_DATA_ROOT = $ENV{LAPS_DATA_ROOT};

if (defined $logdir) {if ($logdir eq $LAPS_DATA_ROOT) {$logdir=$logdir."/log";} }
elsif (defined $LAPS_DATA_ROOT) {$logdir=$LAPS_DATA_ROOT."/log";}
else {die "Can't find path to log data.\n";}

if (defined $hr) {$hr="0".$hr if (length($hr)<2);}

# Get the most recent log file.

$logname = "temp";
@filenames = <$logdir/$logname.log*>;
$nfiles = @filenames;
if ($nfiles == 0) {die "No log files found.\n"}
$age_of_newest = 1;
foreach $file (@filenames) {
  $age = -M $file;
  if ($age < $age_of_newest) {
    $filename = $file;
    $age_of_newest = $age; } }

#$tail = `tail -1 $filename`;
#if ($tail !~ /No stability calculation done for LST file/) {
#  print "Temperature analysis is in progress...\n";}

# This is a bit more kosher...
if (defined $hr) { 
    if(length($hr) < 4)
       {$filename = $logdir."/".$logname.".log.".$hr."20";}
    else
       {$filename = $logdir."/".$logname.".log.".$hr;}
}

open(FILE,$filename) or die "Can't open $filename.";
@lines = <FILE>;
close FILE;
print "\nReading from log file $filename\n\n";

# Determine analysis validtime.
$searchstring = "systime =";
foreach (@lines) {
  if (/$searchstring(.*)/) {
    ($validtime) = split(" ",$1); 
    last; } 
}
print "ANALYSIS VALID TIME (yydddhhmm): $validtime UTC\n\n";

# Determine background model.
# ---------------------------

($modelid,$modeltype,$runtime,$fcsthr,$mdlyr,$mdldy)=&which_bkgd::which_bkgd(@lines);

print "Using $fcsthr fcst from $modelid model started at $runtime UTC \n";
print "$modeltype $modelid $mdlyr$mdldy$runtime$fcsthr \n";

@profiletypes = qw(RASS RAOB DROPSND TOWER RADIOMTR);
foreach $profiletype (@profiletypes) {
# Print $profiletype (only if present)
  $i=0; $iprint=0; $ihead=0;
  foreach (@lines) {
    if (/Temperature bias/ && /$profiletype/) {
      @list = split;
      if($ihead == 0){print "\n$profiletype\s: "; $ihead=1;}
      print "$list[5] "; $iprint=$iprint+1;
      if ($iprint > 11) {print "\n        "; $iprint=0;} 
      $i=$i+1; 
    }
  }
  if($iprint > 0){print "\n";}
}

print "\nQC (Soundings, RASS):\n";
@greplines = grep /QC/, @lines;
@greplines = grep /of/, @greplines;
print "@greplines[0]";
print "@greplines[1]";
print "@greplines[2]";
print "\nQC (ACARS):\n";
print "@greplines[3]";
print "@greplines[4]";
print "@greplines[5]";

print "\nSFC temperature analysis was blended in at lower boundary\n";

print "\n";
@greplines = grep /Error/, @lines;
print "@greplines";

