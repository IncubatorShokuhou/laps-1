#!@PERL@
#
#
#Program either localizes (new) or re-localizes (existing)
#laps domains
#J.Smart 8-20-99
#   "    6-28-01 - renamed to window_domain_rt.pl: general purpose
#                  upgrade for WRFSI.
#
use strict;
use English;
use vars qw($opt_s $opt_i $opt_d $opt_t $opt_w $opt_c $opt_m $opt_h);
use Getopt::Std;
use File::Copy 'cp';
use Cwd;

getopts('s:i:d:t:w:hmc');

umask 002;

# --------------- Notes for command line inputs -------------------------------
# opt_s is LAPS_SRC_ROOT override
# opt_i is LAPSINSTALLROOT override
# opt_d is LAPS_DATA_ROOT (eg., /data/lapb/parallel/laps/data) override.
#       if the data root does not exist, then it is created.
#
# opt_t is template subdirectory (eg., /usr/nfs/common/lapb/parallel/laps/template/"name")
#       The name should be the same as the domain name in LAPS_DATA_ROOT
#       If -t is not defined then it is assumed to be the same as
#       LAPS_SRC_ROOT and -c is disabled.
#
# opt_c controls the removal of entire data root (use command line "-c") or
# saves the log and lapsprd directories          (do not use command line "-c")
#
# opt_m controls laps_localization.pl no_ggm switch. ggm = gridgen_model.
#       if $opt_m is not defined then localize_domain updates the namelists
#       and also runs gridgen_model (producing the static file). If $opt_m
#       is defined then only the namelists are updated (no ggm).
#
# In some cases LAPSINSTALLROOT = LAPS_SRC_ROOT. This is made possible
# by perl module mkdatadirs in laps_tools.pm. It removes Makefile dependence.
#
# The -m and -c options cannot be used simultaneously.
# -----------------------------------------------------------------------------


if(defined $opt_h){print "\nThis command line switch will give you help for using this
                            script.  This is not active yet.\n\n";}

if(!defined $opt_w){die "\nYou must decide and use the -w command line input to
                           specify the type of localization desired. Two options:
                           1. -w laps
                           2. -w wrfsi\n\n";}

my $domain_type = $opt_w;
my ($LAPS_SRC_ROOT, $LAPSINSTALLROOT, $LAPS_DATA_ROOT, $DATAROOT, $DOMAIN_NAME);

$LAPS_SRC_ROOT = $opt_s if( $opt_s);
$LAPSINSTALLROOT = $opt_i if( $opt_i);
$LAPS_DATA_ROOT = $opt_d if( $opt_d);

my $logname;

#This should take care of laps and wrfsi. Use LAPS type variables thereafter.
if($domain_type eq "laps"){
   $LAPS_SRC_ROOT = $ENV{LAPS_SRC_ROOT} if( $ENV{LAPS_SRC_ROOT} && !defined $LAPS_SRC_ROOT);
   $LAPSINSTALLROOT = $ENV{LAPSINSTALLROOT} if( $ENV{LAPSINSTALLROOT} && !defined $LAPSINSTALLROOT);
   $LAPS_DATA_ROOT = $ENV{LAPS_DATA_ROOT} if( $ENV{LAPS_DATA_ROOT} && !defined $LAPS_DATA_ROOT);
   $logname="log";
}elsif($domain_type eq "wrfsi"){
   $LAPS_SRC_ROOT = $ENV{SOURCE_ROOT} if( $ENV{SOURCE_ROOT} && !defined $LAPS_SRC_ROOT);
   $LAPSINSTALLROOT = $ENV{INSTALLROOT} if( $ENV{INSTALLROOT} && !defined $LAPSINSTALLROOT);
   $LAPS_DATA_ROOT = $ENV{MOAD_DATAROOT} if( $ENV{MOAD_DATAROOT} && !defined $LAPS_DATA_ROOT);
   $logname="silog"
}else{
   die "\nUnknown domain type entered with -w command line input: $domain_type.
          You have two options:
          1. -w laps
          2. -w wrfsi\n\n";
}

if( !-d $LAPS_SRC_ROOT){
    print "SOURCE ROOT does not exist. $LAPS_SRC_ROOT. Exiting.\n";
    exit;
}

$LAPSINSTALLROOT=$LAPS_SRC_ROOT if(! defined($LAPSINSTALLROOT));

if( !-d $LAPSINSTALLROOT){
    print "LAPS INSTALL ROOT does not exist. $LAPSINSTALLROOT. Exiting.\n";
    exit;
}

my $all_roots_equal = "F";
if(! defined($LAPS_DATA_ROOT) ){$LAPS_DATA_ROOT = "$LAPSINSTALLROOT/data";
   if($LAPS_SRC_ROOT eq $LAPSINSTALLROOT){
      $all_roots_equal = "T";
      print "WARNING: All lapsroots are equal\n";
   }
}

require "$LAPSINSTALLROOT/etc/laps_tools.pm";
$DOMAIN_NAME = &laps_tools::laps_domain_name($LAPS_DATA_ROOT);
$DATAROOT = &laps_tools::laps_data_root($LAPS_DATA_ROOT);

print "\n";

if($LAPS_SRC_ROOT eq $LAPSINSTALLROOT && $all_roots_equal ne "T"){
   my $strlen=length($DATAROOT);
   $DATAROOT = substr($DATAROOT,0,$strlen-1) if(substr($DATAROOT,$strlen,$strlen) eq "/");
   if("$DATAROOT"."$DOMAIN_NAME" eq $LAPS_SRC_ROOT){
      $all_roots_equal = "T";
      print "WARNING: All lapsroots are equal\n";
   }
}

if($all_roots_equal eq "T"){
   if($LAPS_SRC_ROOT eq "/usr/nfs/common/lapb/parallel/$domain_type"){
      print "Re-localizing FSL development area is not allowed\n";
      print "\n";
      print "Laps Src Root  = $LAPS_SRC_ROOT\n";
      print "Install_Root   = $LAPSINSTALLROOT \n";
      print "Laps_Data_Root = $LAPS_DATA_ROOT\n";
      exit;
   }
}

my ($LAPS_TEMPLATE, $CONFIG_DOMAIN);

if($opt_t){
   $LAPS_TEMPLATE = $opt_t;
   if(!-e $LAPS_TEMPLATE){
       print "Error: the template directory you specified does not exist.\n";
       print "Terminating.\n";exit;
   }
}else{
   print "WARNING! no -t (path to template) command line input.\n";
   print "Using SOURCE ROOT (possibly repository) for all namelists\n";
}
if($opt_c){
   $CONFIG_DOMAIN = "true";
}else{
#   print "-c command line not specified. Default set to false \n";
    $CONFIG_DOMAIN = "false";
    print "Generate laps_data_root directory structure\n";
    &laps_tools::mkdatadirs("$LAPS_DATA_ROOT","$domain_type");
}

print "Source Root    = $LAPS_SRC_ROOT\n";
print "Install Root   = $LAPSINSTALLROOT \n";
print "Data Root      = $LAPS_DATA_ROOT\n";
print "Template Path  = $LAPS_TEMPLATE \n";
print "Config Domain  = $CONFIG_DOMAIN \n";

if($opt_m && $CONFIG_DOMAIN eq "true"){
   print "\n-m and -c cannot be used simultaneously!
           Reconsider the command line inputs.
           Aborting window_domain_rt.pl\n\n";
   exit;
}

#check to see if any saved static and cdl subdirectories got moved to _err; if so, remove.
if( -e "$LAPS_DATA_ROOT/static\_err" ){
   print "removing leftover $LAPS_DATA_ROOT/static\_err\n";
   system("rm -rf $LAPS_DATA_ROOT/static\_err");
}
if( -e "$LAPS_DATA_ROOT/cdl\_err" ){
   print "removing leftover $LAPS_DATA_ROOT/cdl\_err\n";
   system("rm -rf $LAPS_DATA_ROOT/cdl\_err");
}

# WFO: 1st time - save the existing LAPS_DATA_ROOT (in $FXA_LOCAL_DATA/laps_data) before removing it.
#                 softlink data to laps_data appropriately (make "repository" data subdirectory..
#                 otherwise: test if softlink has been broken re-establish it.
if( defined $ENV{FXA_LOCAL_DATA} &&  $all_roots_equal eq "F" ) {

   my $FXA_LOCAL_DATA = $ENV{FXA_LOCAL_DATA};
   my $LAPS_HOME = $ENV{"LAPS_HOME"};

#test if first time "data" and link need to be established
   if( ! -d "$FXA_LOCAL_DATA/laps_data"){
       mkdir "$FXA_LOCAL_DATA/laps_data", 0777 or die "Can't make directory $FXA_LOCAL_DATA/laps_data";
       system("cp -pr $LAPS_DATA_ROOT/static $FXA_LOCAL_DATA/laps_data/.");
       system("cp -pr $LAPS_DATA_ROOT/cdl $FXA_LOCAL_DATA/laps_data/.");
       system("rm -f $FXA_LOCAL_DATA/laps_data/static/lvd/goes-llij\*.lut");
       system("rm -f $LAPS_HOME/data") if( -e "$LAPS_HOME/data");
       system("ln -s $FXA_LOCAL_DATA/laps_data $LAPS_HOME/data");

#test if "repository" (link) exists
   }elsif(!-e "$LAPS_HOME/data" ){
       print "re-establish softlink $LAPS_HOME/data -> $FXA_LOCAL_DATA/laps_data \n";
       system("ln -s $FXA_LOCAL_DATA/laps_data $LAPS_HOME/data");


#test if link directory exists but link is broken
   }elsif(!-l "$LAPS_HOME/data" ){
       print "re-establish softlink $LAPS_HOME/data -> $FXA_LOCAL_DATA/laps_data \n";
       if(-e "$LAPS_HOME/data" ){system("rm -rf $LAPS_HOME/data");}
       system("ln -s $FXA_LOCAL_DATA/laps_data $LAPS_HOME/data");

#test if link exists but is the wrong name (this has happened but not sure how)
   }else{
       my $linkname = $LAPS_HOME."/data";
       my $datalink = readlink $linkname;
       my @filename = split '/',$datalink;
       $linkname = @filename[$#filename];
       if ($linkname ne "laps_data"){
          system("rm -rf $LAPS_HOME/data");
          system("ln -s $FXA_LOCAL_DATA/laps_data $LAPS_HOME/data");
       }
   }

   $LAPS_DATA_ROOT = $FXA_LOCAL_DATA."/laps";
}


if( $CONFIG_DOMAIN eq "true" ) {
  if( $all_roots_equal eq "F" ){

      if( -e $LAPS_DATA_ROOT ){
          if( $LAPS_DATA_ROOT ne "/data/lapb/operational/laps/data" ||
              $LAPS_DATA_ROOT ne "/data/lapb/parallel/laps/data"){
              print "Removing dataroot: $LAPS_DATA_ROOT\n";
              system("rm -rf $LAPS_DATA_ROOT");
          }else{
              print "This script will not remove this dataroot\n";
              print "dataroot = $LAPS_DATA_ROOT\n";
              exit;
          }
      } 
      if( !-e "$DATAROOT/$DOMAIN_NAME" ){
          mkdir "$DATAROOT/$DOMAIN_NAME", 0777 or die "Can't make $DATAROOT/$DOMAIN_NAME $!\n";
      }

      if( !-e $LAPS_DATA_ROOT ){
         mkdir "$LAPS_DATA_ROOT", 0777 or die "Can't make directory in $LAPS_DATA_ROOT $!\n";
      }
      print "Generate DATA_ROOT directory structure\n";
      &laps_tools::mkdatadirs("$LAPS_DATA_ROOT","$domain_type");
  }else{
      print "Script will not remove DATA_ROOT when all-roots are equal\n";
      print "Reconsider your command line inputs ... do you really want -c ?\n";
      exit;}

}else{

  if(-e $LAPS_DATA_ROOT ){

     if($all_roots_equal eq "F") {
        print "Save static and cdl subdirectories\n";
        if(-e "$LAPS_DATA_ROOT/static\_save"){
           print "Found static_save and removing\n";
           system("rm -rf $LAPS_DATA_ROOT/static_save");}
        if(-e "$LAPS_DATA_ROOT/cdl\_save"){
           print "Found cdl_save and removing\n";
           system("rm -rf $LAPS_DATA_ROOT/cdl_save");}
        rename ("$LAPS_DATA_ROOT/static","$LAPS_DATA_ROOT/static\_save");
        rename ("$LAPS_DATA_ROOT/cdl","$LAPS_DATA_ROOT/cdl\_save");
        mkdir "$LAPS_DATA_ROOT/static", 0777 or die "Can't make $LAPS_DATA_ROOT/static $!\n";
        mkdir "$LAPS_DATA_ROOT/cdl", 0777 or die "Can't make $LAPS_DATA_ROOT/cdl $!\n";

     }else{

        print "All roots are equal.\n";

        if(! -e "$DATAROOT/$DOMAIN_NAME/data_rep"){
           print "Make subdirectory data_rep and save static and cdl for save keeping\n";
           mkdir "$DATAROOT/$DOMAIN_NAME/data_rep",0777 or die "Can't make $DATAROOT/$DOMAIN_NAME/data_rep $!\n";
           system("cp -r $LAPS_DATA_ROOT/static $DATAROOT/$DOMAIN_NAME/data_rep/");
           system("cp -r $LAPS_DATA_ROOT/cdl $DATAROOT/$DOMAIN_NAME/data_rep/");
        }else{
           print "subdirectory data_rep exists! Copy data_rep/static and cdl into data\n";
#          system("rm -rf $LAPS_DATA_ROOT/static"); system("rm -rf $LAPS_DATA_ROOT/cdl");
           system("cp -rf $DATAROOT/$DOMAIN_NAME/data_rep/static $LAPS_DATA_ROOT/");
           system("cp -rf $DATAROOT/$DOMAIN_NAME/data_rep/cdl $LAPS_DATA_ROOT/");
        }

        print "Make data_loc (localized data root).
               This is a safety measure when all roots are equal\n\n";

        $LAPS_DATA_ROOT = "$DATAROOT/$DOMAIN_NAME/data_loc";

        if(! -e $LAPS_DATA_ROOT){
           mkdir $LAPS_DATA_ROOT, 0777 or die "Can't make $LAPS_DATA_ROOT $!\n";
           &laps_tools::mkdatadirs("$LAPS_DATA_ROOT","$domain_type");
        }else{
           system("rm -rf $LAPS_DATA_ROOT/static"); system("rm -rf $LAPS_DATA_ROOT/cdl");
           mkdir "$LAPS_DATA_ROOT/static", 0777 or die "Can't make $LAPS_DATA_ROOT/static $!\n";
           mkdir "$LAPS_DATA_ROOT/cdl", 0777 or die "Can't make $LAPS_DATA_ROOT/cdl $!\n";
        }
     }

  }else{
     print "Make a new DATA_ROOT.\n";
     mkdir "$DATAROOT/$DOMAIN_NAME", 0777 or die "Can't make $DATAROOT/$DOMAIN_NAME $!\n";
     mkdir "$LAPS_DATA_ROOT", 0777 or die "Can't make $LAPS_DATA_ROOT $!\n";
     &laps_tools::mkdatadirs("$LAPS_DATA_ROOT","$domain_type");
  }

}

if( defined($LAPS_TEMPLATE) ){
    if( -e $LAPS_TEMPLATE ){
        print "Copy template namelist files from $LAPS_TEMPLATE to $LAPS_DATA_ROOT/static\n";
        opendir(TEMPDIR, $LAPS_TEMPLATE);
        my @filelist = readdir TEMPDIR;
        closedir TEMPDIR;
        foreach (@filelist){
           if( ! /^\./){
              print "Copy $LAPS_TEMPLATE/$_ to $LAPS_DATA_ROOT/static \n";
              system("cp -pr $LAPS_TEMPLATE/$_ $LAPS_DATA_ROOT/static");
           }
        }

    }else{print "The template subdirectory you specified does not exist: $LAPS_TEMPLATE\n";
          print "Terminating.\n"; exit;}

}else{
   print "No template subdirectory. All roots equal(?): $all_roots_equal.\n";
}

if( -e $LAPSINSTALLROOT ){chdir "$LAPSINSTALLROOT/etc";
    print "Running $LAPSINSTALLROOT/etc/localize_domain.pl\n";
}elsif ( -e "LAPS_SRC_ROOT/etc") {chdir "$LAPS_SRC_ROOT/etc" or die "Can't chdir to LAPS INSTALL or SRC_ROOTs $!\n";
    print "Running $LAPS_SRC_ROOT/etc/localize_domain.pl\n";
}
# --------------------------------------------------------------------------------------
# ****************************** Run localize_domain.pl ******************************
# --------------------------------------------------------------------------------------
if( $opt_m ){
   print "--no_ggm switch on\n";
   system("@PERL@ ./localize_domain.pl --dataroot=$LAPS_DATA_ROOT --srcroot=$LAPS_SRC_ROOT --install_root=$LAPSINSTALLROOT --which_type=$domain_type --no_ggm='t' > $LAPS_DATA_ROOT/$logname/localize_domain.log");
}else{
   system("@PERL@ ./localize_domain.pl --dataroot=$LAPS_DATA_ROOT --srcroot=$LAPS_SRC_ROOT --install_root=$LAPSINSTALLROOT --which_type=$domain_type > $LAPS_DATA_ROOT/$logname/localize_domain.log");
}

if( $all_roots_equal eq "T" && -e "$DATAROOT/$DOMAIN_NAME/data_loc" ){
    print "copy data_loc/static and data_loc/cdl to data\n";
    system("cp -rf $DATAROOT/$DOMAIN_NAME/data_loc/static  $DATAROOT/$DOMAIN_NAME/data/");
    system("cp -rf $DATAROOT/$DOMAIN_NAME/data_loc/cdl  $DATAROOT/$DOMAIN_NAME/data/");
    system("cp $DATAROOT/$DOMAIN_NAME/data_loc/$logname/localize_domain.log $DATAROOT/$DOMAIN_NAME/data/$logname/.");
    system("rm -rf $DATAROOT/$DOMAIN_NAME/data_loc");
    $LAPS_DATA_ROOT = "$DATAROOT/$DOMAIN_NAME/data";
}

my ($staticfile, $namelist);
if( $domain_type eq "laps"){$staticfile="static.nest7grid";
                           $namelist  ="nest7grid.parms";
}else{                     $staticfile="static.wrfsi";
                           $namelist  ="wrfsi.nl";
}

if( $opt_m ){
    print "restoring gridgen files. Move from  static_save  to  static \n";
    if(-e "$LAPS_DATA_ROOT/static\_save/topo.dat"){system ("mv $LAPS_DATA_ROOT/static\_save/topo.dat $LAPS_DATA_ROOT/static/");}
    if(-e "$LAPS_DATA_ROOT/static\_save/latlon.dat"){system ("mv $LAPS_DATA_ROOT/static\_save/latlon.dat $LAPS_DATA_ROOT/static/");}
     if(-e "$LAPS_DATA_ROOT/static\_save/corners.dat"){system ("mv $LAPS_DATA_ROOT/static\_save/corners.dat $LAPS_DATA_ROOT/static/");}
    if(-e "$LAPS_DATA_ROOT/static\_save/topography.dat"){system ("mv $LAPS_DATA_ROOT/static\_save/topography.dat $LAPS_DATA_ROOT/static/");}
    if(-e "$LAPS_DATA_ROOT/static\_save/$staticfile"){system ("mv $LAPS_DATA_ROOT/static\_save/$staticfile $LAPS_DATA_ROOT/static/");}
    if(-e "$LAPS_DATA_ROOT/static\_save/drag_coef.dat"){system ("mv $LAPS_DATA_ROOT/static\_save/drag_coef.dat $LAPS_DATA_ROOT/static/");}
}

print "Checking for static file \n";

my $restore_files="false";
if( !defined $opt_m ){
    if(!-e "$LAPS_DATA_ROOT/static/$staticfile"){
       print "error detected\n";
       print "$LAPS_DATA_ROOT/static/$staticfile does not exist!\n";
       print "setting variable - restore_files - to true\n";
       $restore_files="true";
    }else{
       system ("ls -l $LAPS_DATA_ROOT/static/$staticfile");
    }
}

if($restore_files eq "false" && !defined $opt_m){
   print "checking localize_domain.log\n";
   open(LOC,"$LAPS_DATA_ROOT/$logname/localize_domain.log");
   my @loc=<LOC>;
   close(LOC);

   my $world_topo_warn_lines = 0;
   foreach(@loc){if(/world/i && /warning/i){$world_topo_warn_lines = 1;}}
   my $error_lines = grep /error/i,@loc;
   my $cannot_lines = grep /cannot/i,@loc;

   if($error_lines gt 0){
      print "Lines with error found in localize_domain.log\n";
      print "Settting variable -- restore_files -- to true\n";
      $restore_files="true";
   }
   if($cannot_lines gt 0){print "Lines with cannot found in localize_domain.log\n";}
   if($world_topo_warn_lines gt 0){print "Lines with both world_topo and warning found in localize_domain.log\n";}

   system ("ls -l   $LAPS_DATA_ROOT/$logname/localize_domain.log");
   system ("tail -1 $LAPS_DATA_ROOT/$logname/localize_domain.log");
}

if( $restore_files eq "true" ) {
    print "will try and save static and cdl to _err\n";
    print "for further examination. --> localization incomplete <--\n";
    system("mv $LAPS_DATA_ROOT/static $LAPS_DATA_ROOT/static\_err");
    system("mv $LAPS_DATA_ROOT/cdl $LAPS_DATA_ROOT/cdl\_err");
    if( ! -e "$DATAROOT/$DOMAIN_NAME/data_rep"){
       system("mv $LAPS_DATA_ROOT/static\_save $LAPS_DATA_ROOT/static");
       system("mv $LAPS_DATA_ROOT/cdl\_save    $LAPS_DATA_ROOT/cdl");
    }

    if(!-e "$LAPS_DATA_ROOT/static"){
       mkdir "$LAPS_DATA_ROOT/static", 0777 or die "Can't make directory $LAPS_DATA_ROOT/static";
    }
    system("cp -p $DATAROOT/laps_data/static/$namelist $LAPS_DATA_ROOT/static/");
    system("cp -p $DATAROOT/laps_data/static/corners.dat $LAPS_DATA_ROOT/static/");
}

if( -e "$LAPS_DATA_ROOT/static\_save"){
    print "removing $LAPS_DATA_ROOT/static\_save\n";
    system("rm -rf $LAPS_DATA_ROOT/static\_save");
}
if( -e "$LAPS_DATA_ROOT/cdl\_save"){
    print "removing $LAPS_DATA_ROOT/cdl\_save\n";
    system("rm -rf $LAPS_DATA_ROOT/cdl\_save");
}

print "update lapsprd - synchronize with repository\n";
&laps_tools::mkdatadirs("$LAPS_DATA_ROOT","$domain_type");


print "window_laps_rt complete\n";
exit;
