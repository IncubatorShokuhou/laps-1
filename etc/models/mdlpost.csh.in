#!/bin/csh        

# This script converts model data into FUA/FSF files 

# Supports composite reflectivity data for the HRRR, and can be more 
# generalized later to other fields/models

setenv LAPS_DATA_ROOT $1
setenv MODEL $2

setenv LAPSINSTALLROOT @prefix@

if ($3 == "") then
    setenv DELAY 3
else
    setenv DELAY $3
endif

# Obtain model runtime (on the hour), default is with a 3 hour delay
setenv YYDDDHHMM `perl @prefix@/etc/sched_sys.pl -d $DELAY -c 3600`              

#setenv YYDDDHHMM `head -1 $LAPS_DATA_ROOT/time/modelvtime.dat`
#setenv YYDDDHHMM 122021200 # for testing

echo "YYDDDHHMM (model initialization time to process) = $YYDDDHHMM"

setenv FCSTINTVL `perl $LAPSINSTALLROOT/etc/read_nl.pl -d $LAPS_DATA_ROOT -n nest7grid.parms -v model_fcst_intvl`
echo "FCSTINTVL is $FCSTINTVL"

#if (-e /data/fab/laps/laps_conus.fsf) then
#   setenv NCTEMPLATE /data/fab/laps/laps_conus.fsf
#endif

setenv NCTEMPLATE $LAPS_DATA_ROOT/template.fsf

# Create FSF template file
#echo "ncgen -o $NCTEMPLATE $LAPS_DATA_ROOT/cdl/fsf.cdl"
#      ncgen -o $NCTEMPLATE $LAPS_DATA_ROOT/cdl/fsf.cdl

echo "NCTEMPLATE is $NCTEMPLATE"
ls -l $NCTEMPLATE

if (! -e $NCTEMPLATE) then
    echo "ERROR $NCTEMPLATE does not exist"
    exit
endif

foreach HRRRHH (00 01 02 03 04 05 06 07 08 09 10 11 12)

    setenv FCSTTIMEHRRR 0000

    if ($FCSTINTVL == 900 || $FCSTINTVL == 1800) then
        echo "using 15 minute output"

        if ($HRRRHH == 00) then
            setenv MMTIMES '00'
            setenv FHH 00          
        else
            setenv MMTIMES '15 30 45 60'
#           @ FHH_I = $HRRRHH - 1
#           setenv FHH 0$FHH_I
        endif

    else
        echo "using 15 minute output files, for every 60 minutes of output"

        if ($HRRRHH == 00) then
            setenv MMTIMES '00'
            setenv FHH 00          
        else
            setenv MMTIMES '60'
#           @ FHH_I = $HRRRHH - 1
#           setenv FHH 0$FHH_I
        endif

    endif

    foreach FMM ($MMTIMES)

        if ($FMM == 60 || $HRRRHH == 00) then
            setenv FHH $HRRRHH
            setenv FCSTTIME $FHH\00 
        else
            @ FHH_I = $HRRRHH - 1
            if ($FHH_I < 10) then
                setenv FHH 0$FHH_I
            else
                setenv FHH $FHH_I
            endif
            setenv FCSTTIME $FHH$FMM
        endif

        setenv NTABLE 31

        if ($HRRRHH == 00)then
            @ REC_LMR = 1
        else
            @ REC_LMR = ((($FMM / 15) - 1) * $NTABLE) + 1
        endif

#       Info from HRRR 15-min GRIB2 table - http://ruc.noaa.gov/hrrr/GRIB2Table-subh.txt
        @ REC_TSF = $REC_LMR + 18 # 19 in table
        @ REC_DSF = $REC_LMR + 19 # 20 in table
        @ REC_WSF = $REC_LMR + 20 # 21 in table
        @ REC_SWI = $REC_LMR + 29 # 30 in table
        @ REC_RTO = 52                                    

        echo " "
        echo "Processing forecast time/record $FCSTTIME $REC_LMR"

#       setenv GRIBIN /home/Steve.Albers/public/data/fsl/hrrr/conus/wrftwo_subh/$YYDDDHHMM$HRRRHH\00         
        setenv GRIBIN /public/data/fsl/hrrr/conus/wrftwo_subh/$YYDDDHHMM$HRRRHH\00         

#       setenv NCOUT /home/Steve.Albers/outdir/$YYDDDHHMM$FCSTTIME.fsf
        setenv OUTDIR $LAPS_DATA_ROOT/lapsprd/fsf/$MODEL
        setenv NCOUT $OUTDIR/$YYDDDHHMM$FCSTTIME.fsf

#       Specify stmas_hwt grid for testing
#       setenv NEWGRID "-new_grid lambert:-98.408:35.25:35.25 -105.0:433:3000. 28.0:433.:3000."
        setenv NEWGRID " "                                                                         
        echo "NEWGRID is $NEWGRID"

        if (! -e $GRIBIN) then
            echo "ERROR: $GRIBIN is not present"
        endif

#       Parse navigation variables from grib2 file into environment variables
        echo              "wgrib2  $GRIBIN -s -grid -d $REC_LMR"                                             
                           wgrib2  $GRIBIN -s -grid -d $REC_LMR                                              
              setenv LAT1 `wgrib2  $GRIBIN -s -grid -d $REC_LMR | grep Lat1 | awk '{print $2}'`            
        echo "Lat1 is $LAT1"

#       Convert GRIB2 file into initial NetCDF file
        echo "wgrib2  $GRIBIN -s -d $REC_LMR         $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_LMR         $NEWGRID -netcdf $NCOUT

        echo "wgrib2  $GRIBIN -s -d $REC_TSF -append $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_TSF -append $NEWGRID -netcdf $NCOUT

        echo "wgrib2  $GRIBIN -s -d $REC_DSF -append $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_DSF -append $NEWGRID -netcdf $NCOUT

        echo "wgrib2  $GRIBIN -s -d $REC_WSF.1 -append $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_WSF.1 -append $NEWGRID -netcdf $NCOUT

        echo "wgrib2  $GRIBIN -s -d $REC_WSF.2 -append $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_WSF.2 -append $NEWGRID -netcdf $NCOUT

        echo "wgrib2  $GRIBIN -s -d $REC_SWI -append $NEWGRID -netcdf $NCOUT"
              wgrib2  $GRIBIN -s -d $REC_SWI -append $NEWGRID -netcdf $NCOUT

        setenv GRIB_PCP_IN /nofile                                                         
        if ($FMM == 00 || $FMM == 60) then
            setenv GRIB_PCP_IN /public/data/fsl/hrrr/conus/wrftwo/$YYDDDHHMM$HRRRHH\00         
            if (-e $GRIB_PCP_IN) then
                echo "$GRIB_PCP_IN is present"

#               echo "wgrib2  $GRIB_PCP_IN -s -d $REC_RTO -append $NEWGRID -netcdf $NCOUT"
#                     wgrib2  $GRIB_PCP_IN -s -d $REC_RTO -append $NEWGRID -netcdf $NCOUT
              
                echo "precip command for rto"
                echo "wgrib2  $GRIB_PCP_IN -s -match APCP:surface:0 -append $NEWGRID -netcdf $NCOUT"                   
                      wgrib2  $GRIB_PCP_IN -s -match APCP:surface:0 -append $NEWGRID -netcdf $NCOUT                   
              
                echo "new precip command for r01"
                if ($HRRRHH == 01 && $FCSTINTVL == 3600) then
                    echo "wgrib2  $GRIB_PCP_IN -s -match APCP:surface: | grep 0-1     | wgrib2 -i $GRIB_PCP_IN -nc_table $LAPS_DATA_ROOT/static/Variable_Tables/nctable.HRRR.r01 -append $NEWGRID -netcdf $NCOUT"                   
                          wgrib2  $GRIB_PCP_IN -s -match APCP:surface: | grep 0-1     | wgrib2 -i $GRIB_PCP_IN -nc_table $LAPS_DATA_ROOT/static/Variable_Tables/nctable.HRRR.r01 -append $NEWGRID -netcdf $NCOUT
                else
                    echo "wgrib2  $GRIB_PCP_IN -s -match APCP:surface: | grep -v "0-" | wgrib2 -i $GRIB_PCP_IN -nc_table $LAPS_DATA_ROOT/static/Variable_Tables/nctable.HRRR.r01 -append $NEWGRID -netcdf $NCOUT"                   
                          wgrib2  $GRIB_PCP_IN -s -match APCP:surface: | grep -v "0-" | wgrib2 -i $GRIB_PCP_IN -nc_table $LAPS_DATA_ROOT/static/Variable_Tables/nctable.HRRR.r01 -append $NEWGRID -netcdf $NCOUT
                endif

            else
                echo "$GRIB_PCP_IN is not present"
            endif
        endif

#       cp $NCOUT $NCOUT.wgrib2out

        ncdump -h $NCOUT 

        if (-e $GRIB_PCP_IN) then
            echo "ncrename -v var0_16_196_localleveltype2000,lmr -v TMP_2maboveground,tsf -v DPT_2maboveground,dsf -v UGRD_10maboveground,usf -v VGRD_10maboveground,vsf -v var0_4_192_surface,swi -v APCP_surface,rto $NCOUT"          
                  ncrename -v var0_16_196_localleveltype2000,lmr -v TMP_2maboveground,tsf -v DPT_2maboveground,dsf -v UGRD_10maboveground,usf -v VGRD_10maboveground,vsf -v var0_4_192_surface,swi -v APCP_surface,rto $NCOUT           
 
        else
            echo "ncrename -v var0_16_196_localleveltype2000,lmr -v TMP_2maboveground,tsf -v DPT_2maboveground,dsf -v UGRD_10maboveground,usf -v VGRD_10maboveground,vsf -v var0_4_192_surface,swi $NCOUT"          
                  ncrename -v var0_16_196_localleveltype2000,lmr -v TMP_2maboveground,tsf -v DPT_2maboveground,dsf -v UGRD_10maboveground,usf -v VGRD_10maboveground,vsf -v var0_4_192_surface,swi $NCOUT           

        endif

        ncdump -h $NCOUT 
#       cp $NCOUT $NCOUT.renamed

#       echo "ncatted -O -a lvl_coord,lmr,a,c,"MSL" $NCOUT"
#             ncatted -O -a lvl_coord,lmr,a,c,"MSL" $NCOUT

#       echo "ncatted -O -a LAPS_units,lmr,a,c,"DBZ" $NCOUT"
#             ncatted -O -a LAPS_units,lmr,a,c,"DBZ" $NCOUT

#       Add dimensions: record = UNLIMITED, z, nav, namelen                   
#       See http://jisao.washington.edu/data/nco/

#       Add record dimension
        echo "ncecat -O -h $NCOUT $NCOUT"       
              ncecat -O -h $NCOUT $NCOUT

#       Change value of time dimension (wipes out the lmr field)
#       setenv STR1 "time = UNLIMITED ; // (1 currently)"
#       setenv STR2 "time = 1 ;"
#       echo "ncdump $NCOUT  | sed -e "s#^.$STR1# $STR2#" | ncgen -o $NCOUT"
#             ncdump $NCOUT  | sed -e "s#^.$STR1# $STR2#" | ncgen -o $NCOUT

#       Rename time dimension to z
        echo "ncrename -d time,z $NCOUT"          
              ncrename -d time,z $NCOUT           

#       Add record dimension
#       echo "ncecat -O -h $NCOUT $NCOUT"       
#             ncecat -O -h $NCOUT $NCOUT

#       Rename time dimension to nav
#       echo "ncrename -d time,nav $NCOUT"          
#             ncrename -d time,nav $NCOUT           

#       Reorder dimensions                       
        echo "ncpdq -a record,z,y,x -O $NCOUT $NCOUT"
              ncpdq -a record,z,y,x -O $NCOUT $NCOUT

#       Append miscellaneous variables from FSF template file
        echo "ncks -A -v lmr_comment,tsf_comment,dsf_comment,usf_comment,vsf_comment,swi_comment,rto_comment,r01_comment,imax,jmax,kmax,kdim,level,lmr_fcinv,tsf_fcinv,dsf_fcinv,usf_fcinv,vsf_fcinv,swi_fcinv,rto_fcinv,r01_fcinv,grid_type,x_dim,y_dim,Nx,Ny,Dx,Dy,La1,Lo1,LoV,La2,Lo2,Latin1,Latin2 $NCTEMPLATE $NCOUT"
              ncks -A -v lmr_comment,tsf_comment,dsf_comment,usf_comment,vsf_comment,swi_comment,rto_comment,r01_comment,imax,jmax,kmax,kdim,level,lmr_fcinv,tsf_fcinv,dsf_fcinv,usf_fcinv,vsf_fcinv,swi_fcinv,rto_fcinv,r01_fcinv,grid_type,x_dim,y_dim,Nx,Ny,Dx,Dy,La1,Lo1,LoV,La2,Lo2,Latin1,Latin2 $NCTEMPLATE $NCOUT

        rm $NCOUT.pid*ncks.tmp
#       cp $NCOUT $NCOUT.ncks

#       Modify the navigation variables
#       echo "ncap2 -O -v -s 'Dx=3000.' $NCOUT $NCOUT"
#             ncap2 -O -v -s 'Dx=3000.' $NCOUT $NCOUT 

#       echo "ncatted -O -a Dy,global,m,f,3000. $NCOUT"
#             ncatted -O -a Dy,global,m,f,3000. $NCOUT
        
#       echo "ncatted -O -a La1,global,m,f,$LAT1 $NCOUT"
#             ncatted -O -a La1,global,m,f,$LAT1 $NCOUT

#       echo "ncatted -O -a Lo1,global,m,f,$LON1 $NCOUT"
#             ncatted -O -a Lo1,global,m,f,$LON1 $NCOUT

        if ($FMM == 00 || $FMM == 60) then
            echo "Hourly HRRR files under construction for FUA"
        endif

        echo "*** regridding $NCOUT ***"
        echo "$LAPSINSTALLROOT/bin/lfmregrid.exe $OUTDIR/$YYDDDHHMM$FCSTTIME $YYDDDHHMM $FCSTTIME $OUTDIR $LAPS_DATA_ROOT"
              $LAPSINSTALLROOT/bin/lfmregrid.exe $OUTDIR/$YYDDDHHMM$FCSTTIME $YYDDDHHMM $FCSTTIME $OUTDIR $LAPS_DATA_ROOT

#       exit # for testing

    end

end

echo ""
echo "output..."
ls -l $OUTDIR
