#!@PERL@
#
#
#Program either localizes (new) or re-localizes (existing)
#a laps domain
#J.Smart 8-20-99
#
use strict;
use English;
use vars qw($opt_s $opt_i $opt_d $opt_t $opt_c);
use Getopt::Std;
use File::Copy 'cp';

getopts('s:i:d:t:c:');

#
# opt_s is LAPS_SRC_ROOT override
# opt_i is LAPSINSTALLROOT override
# opt_d is LAPS_DATA_ROOT (eg., /data/lapb/parallel/laps/data) override.
#       if the data root does not exist and -c = "t", then it is created.
#
# opt_t is template subdirectory (eg., /usr/nfs/common/lapb/parallel/laps/template/"name")
#          name is usually the same as the domain name in LAPS_DATA_ROOT
# opt_c controls the removal of entire data root (=t, for true) or saves the
# log and lapsprd directories (=f, for false)
#
# In some cases LAPSINSTALLROOT = LAPS_SRC_ROOT. This is made possible
# by perl module mkdatadirs.pm that removes the Makefile dependence.
#
# If no template is specified and opt_c = "f" then a new LAPS_DATA_ROOT
# is built from either the LAPSINSTALLROOT or the LAPS_SRC_ROOT.
#
my $LAPS_SRC_ROOT ; my $LAPSINSTALLROOT; my $LAPS_DATA_ROOT;

$LAPS_SRC_ROOT = $ENV{LAPS_SRC_ROOT} if( $ENV{LAPS_SRC_ROOT});
$LAPSINSTALLROOT = $ENV{LAPSINSTALLROOT} if( $ENV{LAPSINSTALLROOT});
$LAPS_DATA_ROOT = $ENV{LAPS_DATA_ROOT} if( $ENV{LAPS_DATA_ROOT});

if( $LAPS_DATA_ROOT eq $LAPS_SRC_ROOT && !$opt_s){
    print "LAPS_DATA_ROOT = LAPS_SRC_ROOT and no -s command line option\n";
    print "Terminating.  Use -s option to override this behavior\n";
    exit;}

$LAPS_SRC_ROOT = $opt_s if( $opt_s);
$LAPSINSTALLROOT = $opt_i if( $opt_i);
$LAPS_DATA_ROOT = $opt_d if( $opt_d);

my $LAPS_TEMPLATE;
my $CONFIG_DOMAIN;

if($opt_t){
   $LAPS_TEMPLATE = $opt_t;
}else{
   print "-t (path to template) command line input missing.\n";
   print "Use LAPS_SRC_ROOT for namelists\n";
}
if($opt_c){
   $CONFIG_DOMAIN = $opt_c;
}else{
   print "-c command line not specified. Default set to false \n";
   $CONFIG_DOMAIN = "f";
}

print "Laps Src Root = $LAPS_SRC_ROOT\n";
print "Install_Root = $LAPSINSTALLROOT \n";
print "Laps_Data_Root = $LAPS_DATA_ROOT\n";
print "Laps Template = $LAPS_TEMPLATE \n";
print "Config Domain = $CONFIG_DOMAIN \n";

# WFO: 1st time - save the existing LAPS_DATA_ROOT (in $FXA_DATA/laps_data) before removing it.
#                 softlink data to laps_data appropriately.
my $FXA_DATA = $ENV{"FXA_DATA"}; my $LAPS_HOME = $ENV{"LAPS_HOME"};
if(-d $FXA_DATA && ! -d "$FXA_DATA/laps_data"){
   mkdir "$FXA_DATA/laps_data", 0777 or die "Can't make directory $FXA_DATA/laps_data";
   system("cp -r $LAPS_DATA_ROOT/static $FXA_DATA/laps_data/.");
   system("cp -r $LAPS_DATA_ROOT/cdl $FXA_DATA/laps_data/.");
   chdir $LAPS_HOME;
   system("ln -s $FXA_DATA/laps_data data");
}

require "$LAPSINSTALLROOT/etc/mkdatadirs.pm";

if( $CONFIG_DOMAIN eq "t") {
  print "Removing dataroot: $LAPS_DATA_ROOT\n";
  if( -e $LAPS_DATA_ROOT ){
      if( $LAPS_DATA_ROOT ne "/data/lapb/operational/laps/data"){
         system("rm -rf $LAPS_DATA_ROOT");
      }
  } 
  mkdir "$LAPS_DATA_ROOT", 0777 or die "Can't make directory in $LAPS_DATA_ROOT $!\n";
  print "Use mkdatadir.pm to generate lapsdataroot directory structure\n";
  &mkdatadirs::mkdatadirs($LAPS_DATA_ROOT);
}else{
  print "Keep lapsprd and log subdirectories\n";
  if(-e $LAPS_DATA_ROOT ){
     system ("rm -rf $LAPS_DATA_ROOT/static");system ("rm -rf $LAPS_DATA_ROOT/cdl");
     rename ("$LAPS_DATA_ROOT","$LAPS_DATA_ROOT\_save");
     mkdir "$LAPS_DATA_ROOT", 0777 or die "Can't make $LAPS_DATA_ROOT $!\n";
     &mkdatadirs::mkdatadirs.pm($LAPS_DATA_ROOT);
  }else{print "You want to save these but there is no dataroot. I'm terminating\n";
        exit;}
}

if( $LAPS_TEMPLATE ){
    print "Copy template namelist files from $LAPS_TEMPLATE to $LAPS_DATA_ROOT/static\n";
    system("cp $LAPS_TEMPLATE/nest7grid.parms $LAPS_DATA_ROOT/static/");
    system("cp $LAPS_TEMPLATE/*.nl $LAPS_DATA_ROOT/static/");}

if( -e $LAPSINSTALLROOT ){chdir "$LAPSINSTALLROOT/etc";
    print "Running $LAPSINSTALLROOT/laps_localization.pl\n";
}elsif ( -e "LAPS_SRC_ROOT/etc") {chdir "$LAPS_SRC_ROOT/etc" or die "Can't chdir to LAPS INSTALL or SRC_ROOTs $!\n";
    print "Running $LAPS_SRC_ROOT/laps_localization.pl\n";}

# ***** Run laps_localization.pl *****
# ------------------------------------
system("@PERL@ ./laps_localization.pl --dataroot=$LAPS_DATA_ROOT --srcroot=$LAPS_SRC_ROOT --lapsroot=$LAPSINSTALLROOT > $LAPS_DATA_ROOT/laps_localization.log");

print ("Checking for static.nest7grid");
system("ls -l $LAPS_DATA_ROOT/static/static.nest7grid"); print "\n";
print "checking laps_localization.log\n";
open(LOC,"$LAPS_DATA_ROOT/laps_localization.log");
my @loc=<LOC>;
close(LOC);

#foreach(@loc){print $_ if(/error/i || /warning/i || /cannot/i);}

my $world_topo_warn_lines = 0;
foreach(@loc){if(/world/i && /warning/i){$world_topo_warn_lines = 1;}}
my $error_lines = grep /error/i,@loc;
my $cannot_lines = grep /cannot/i,@loc;

if($error_lines gt 0){print "Lines with error found in laps_localization.log\n";}
if($cannot_lines gt 0){print "Lines with cannot found in laps_localization.log\n";}
if($world_topo_warn_lines gt 0){print "Lines with both world_topo and warning found in laps_localization.log\n";}

#if($warning_lines gt 0){print "Lines with warning found in laps_localization.log\n";}

system ("tail -1               $LAPS_DATA_ROOT/laps_localization.log");
system ("ls -l                 $LAPS_DATA_ROOT/laps_localization.log");

if( $CONFIG_DOMAIN eq "f"){print "restoring saved dataroot files\n";
   system("mv $LAPS_DATA_ROOT/laps_localization.log $LAPS_DATA_ROOT\_save/log/.");
   system("rm -rf $LAPS_DATA_ROOT/lapsprd"); system("rm -rf $LAPS_DATA_ROOT/log");
   system("mv $LAPS_DATA_ROOT\_save/lapsprd $LAPS_DATA_ROOT/");
   system("mv $LAPS_DATA_ROOT\_save/log     $LAPS_DATA_ROOT/");
   system("mv $LAPS_DATA_ROOT\_save/time    $LAPS_DATA_ROOT/");
   system("rm -rf $LAPS_DATA_ROOT\_save");
}elsif ( -e "$LAPS_DATA_ROOT/laps_localization.log"){system("mv $LAPS_DATA_ROOT/laps_localization.log $LAPS_DATA_ROOT/log/.");}

print "window_laps_rt complete\n";
exit;
