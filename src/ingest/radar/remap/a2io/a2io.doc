			==============================
			NSSL A2 I/O DOCUMENTATION 1995
			==============================

The following set of calls can be made at any time, as they return information
that is available at compile time.

get_field_num(char *s)	All data requests are made by field number instead of
			a character string to make the code run faster.  The
			value returned is the field number, or -1 if the input
			field isn't correct.  All routines check to see if there
			is a good field number before continuing, so users do
			not need to do this in their code.  The valid input for
			88D data is (case important):  "DBZ", "VEL", "SPW", and
			"SNR".

get_field_name(int n, char *s)
			This is a reverse of get_field_num().  The user supplies
			a field number, and the name is returned in "s".  If "s"
			isn't at three bytes in length, then a core dump could
			occur.  If the field number isn't valid, then "???" is
			returned in "s".  The return value of the function is
			meaningless.

get_rt_mode()		Returns 0 if the code is built with the playback (tape)
			libraries.  Returns 1 if the code is built with the
			realtime libraries.


The following routine may optionally appear before the radar initialization
call.

set_radar_name(char *s)	Specify 88D site name, in all caps.  Length should be
			at least four bytes to prevent a core dump.  See below.

One of the following two calls must be made before attempting to access any of
the data.  These calls open some i/o device.

a2_init( char *s )	Obsolete call.  Replacement call is radar_init().  It
			is currently there for backwards compatibility.

radar_init( char *s )	First call.  "s" is tape drive in playback mode. 
			Workstation:device syntax (such as lion:/dev/rst5)
			will work.  For realtime operations, use "R" to attach
			to the raw circular buffer, and "E" to attach to the				crems/ dealiasing circular buffer.  This function does
			NOT doa read_radial() call.
		
One of the following two calls must be used to perform the i/o.

read_record( char *mybuf )	Read a data record.  For tape playback, a
			data record will probably contain more than one
			radial.  For realtime, the size should be 8192.  For
			tape playback, the size should be 145920.  If the sizes
			are too small, function calls may generate fatal error
			messages.  Return values are number of bytes read, or
			0 for eof.  NO OTHER CALLS BEYOND THIS POINT SHOULD BE
			USED IF THE USER PROGRAM USES read_record() TO DO THE
			I/O, AS read_record() DOES NOT DO ANY DATA DECODING.

read_radial()		Read the next radial.  If input is tape, the call won't
			return until a radial is read with no i/o errors, or
			a double eof is reached.  Routine returns 0 for data
			and 1 for double eof.  [Double eof code and return
			values are new.]

All the rest of the calls, return data from the most recent read_radial() call.
Software should no longer core dump if one of the "get" routines are called
before the first read_radial() call.

Return values are always integers.

get_data( float dbz[], float vel[], float snr[], float sw[], int n )
			Loads "n" points of data into arrays.  Users do not
			need to worry about busted arrays, as everything is
			handled properly.  If the user requests more points
			than available, they will get the MISSING_VALUE
			(-999.0).  All values of SNR are set to 40.  THIS IS
			NOW OBSOLETE.  THE get_data_field() SHOULD BE USED
			INSTEAD.  The call is maintained in this release for
			backwards compatibility.

get_data_field( int num, float data[], int n )
			Loads "n" points of data into array "data" for variable
			"num".  See get_field_num() to determine "num".  Return
			values are 0 if everything is ok and MISSING if the
			data isn't present.  Note:  for 88Ds, SNR will return
			values of 40, even though get_status() says the data
			isn't there.  This is to keep any algorithms happy that
			depend on SNR being present.  Arrays are handled
			properly.

get_altitude()		Returns MISSING.
get_azi()		Returns azimuth * 10.
get_beamwidth()		Returns 95 (0.95 * 100).
get_day()		Returns day of month.
get_elev()		Returns elevation angle * 100.  In the event of a bad
			elevation angle, the last good value is returned.  (Some
			88Ds have a hardware problem that cause then to produce
			ridiculous values).  [The elevation fix is recently
			added].
get_first_gate( int n )	Range to first gate in meters.  See get_field_num() for
			values of "n".  If the data is not available, MISSING
			(-999) will be returned.
get_fixed_angle()	Return fixed elevation angle * 100.
get_frequency()		Return MISSING.
get_gate_spacing(int n)	Gate spacing in meters.  See get_field_num() for values
			of "n".
get_hour()		Returns hour of day.
get_latitude()		Returns latitude * 10000.  See below.
get_latitude_dms(int d, int m, int s)
			"d" is degress, "m" is minutes, and "s" is seconds.
			Return value is meaningless.
get_longitude()		Returns latitude * 10000.  See below.
get_longitude_dms(int d, int m, int s)
			"d" is degress, "m" is minutes, and "s" is seconds.
			Return value is meaningless.
get_min()		Returns minute of hour.
get_month()		Returns month of year (range 1 to 12).
get_nyquist()		Returns nyquist if velocity data is present, otherwise
			it returns MISSING.  Value is m/s * 100.
get_number_of_gates(n)	Returns number of gates.  See get_field_num() for
			values of "n".
get_polarization()	Returns 1.
get_power()		Returns MISSING.
get_prf()		Returns 1000.
get_prt()		Returns MISSING.
get_proj_name(char *s)	Returns "REALTIME NEXRAD " in "s".  "s" should be 16
			bytes in length.
get_pulse_width()	Returns MISSING.
get_radar_name(char *s)	Returns radar name in "s".  "s" should be 16 bytes in
			length.  See below.
get_scan()		Returns scan number.
get_scan_dir()		Returns -1, 0, or 1.  Don't depend on these values!
get_scan_status()	Returns 1 if volume scan number has changed, otherwise,
			returns 0.  Always returns 1 for first radial.
get_sec()		Returns seconds.
get_site_name(char *s)	Returns site name in "s".  "s" should be 16 bytes
			in length.   See below.
get_status( int n ) 	Returns 1 if data is present.  Returns 0 if data is not
			present.  "n" is same as in get_field_num().
get_tilt()		Return tilt number.
get_tilt_status()	Returns 1 if if volume scan or tilt number have changed,
			otherwise, returns 0.  Always returns 1 for first
			radial.
get_tilt_type()		Returns 1.
get_timestamp()		Returns time in the same format as time(3).
get_vcp()		Returns VCP number.
get_year()		Returns year.

Radar name, site name, latitude, longitude rules...

The radar name is determined by:

(1)  User program.  A "set_radar_name(char *s)" function is available.  This
     function must be called BEFORE radar_init().
(2)  If there isn't a call to set_radar_name(), then the program looks for
     the environmental variable RADARNAME.  If found, the name is used, and
     the code falls thru to the site name code.
(3)  If neither conditions is met, the radar name returns "UNKN", the site
     name is "UNKNOWN ".  Altitude is MISSING.  Lat/long are zero.

If a radar name is found, then the site name is determined by:

(1)  Look for the environmental variable RADARFILE.  This points to a file
     that follows the exact format of ~ssap/Build2.5/radarinfo.dat.

(2)  If RADARFILE isn't used or if the file pointed to doesn't exist, then
     the program looks for "radarinfo.dat" in the current directory.

(3)  If there still isn't a valid file, then site becomes "UNKNOWN ".
     Altitude is MISSING.  Lat/long are zero.

(4)  If a valid file is found, then site, lat, and long info is read from
     the file.  If radar name isn't found, site becomes "UNKNOWN ".  Lat/long
     are set to zero.  The user will be notified when this occurs.  If radar
     name is found, correct info for site name, lat, and long will be available.

Restricted data processing...

The user can control the amount of data processed by setting environmental
parameters.  The following are available:

A2_START_SCAN:	first volume scan processed, default is 1
A2_END_SCAN:	last volume scan processed, default is 9999
A2_NUM_SCAN:	total number of volume scans processed, default is 9999

User information will be printed out, so that the user can verify the
information was processed by the software.

No tape positioning is done.  If A2_END_SCAN is set, and is before the current
tape volume scan, then the user will get the double eof flag ( read_radial()
will return 1 ).

The first end scan event that occurs (A2_END_SCAN, A2_NUM_SCAN) will trigger the
double eof flag.

If the tape is located before A2_START_SCAN, the software will go into "search"
mode.  There will be frequent (every 500 radials) "read_radial:  looking for
valid scan number" messages.

The "restricted data processing" feature only works in tape playback mode.  User
input is ignored for the realtime system.

Messages:
read_radial:  logic fault:  (text)

Something went wrong in the bookkeeping in preparation to access the next
radial (not necessary the next record).  The rest of the record will be
discarded and a new record will be read in at the next read_radial() call.
Please notify Kevin Thomas if this message occurs.

Linking:
Tape playback:	-la2tp -ltpio
Realtime:	-la2rt -lnexrad -lnssl
