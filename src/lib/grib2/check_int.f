      subroutine check_int(kfildo,ia,ib,nval,nxy,is5,ns5,iclean,ibitmap,
     1                     missp,misss,jmissp,jmisss,ier,
     2                     jer,ndjer,kjer,*)
c
c        may      2000   lawrence original coding
c        january  2001   glahn    comments
c        november 2001   glahn    added jer, ndfer, and kjer to
c                                 call and called trace
c        december 2001   glahn    added test for misss=missp;
c                                 added kfildo to call
c        february 2002   glahn    modified comment for nval
c
c        purpose
c            determines how many values are present in an integer
c            data field based on the packing method and whether
c            or not a bit-map was provided to this routine.  this
c            routine also determines the existence of primary
c            and secondary missing values in the data field.
c
c        data set use
c           none
c
c        variables
c               ia(k) = ia( ) contains the data to be packed into
c                       the grib2 message (k=1,nval).  (input/output)
c               ib(k) = the bit map when one is used. it indicates
c                       where missing values were located in the
c                       data field after the missing values
c                       have been removed. there is a one-to-one
c                       correspondence between the values in the
c                       bit-map and the values in the data field
c                       before the missing values are removed.
c                       a 0 in the bit-map indicates the position
c                       of a missing value, a 1 indicates the
c                       position of a valid value. in this routine
c                       the bit-map is used to get a count of the
c                       number of valid values (nval).  (input)
c                nval = the number of values in ia( ).  this is
c                       the number of non-missing values for simple
c                       with a bit map; nxy otherwise.  (output)
c                 nxy = dimension of ia( ) and ib( ).  (input)
c              is5(k) = the values associated with section 5, keyed
c                       to the octet number (k=1,ns5).  the elements
c                       used in this routine are:
c                       is5(10), template number:
c                       0 = simple
c                       1 = not supported
c                       2 = complex
c                       3 = spatial differencing
c                       (input)
c                       is5(23), provision for missing
c                       values when process is not simple:
c                       0 = no explicit missing values in grid
c                           [a( ) or ia( )]
c                       1 = primary missing values only are possible
c                       2 = primary and secondary missing values are
c                           possible
c                       (input/output)
c                 ns5 = the dimension of is5( ).  (input)
c              iclean = 1 when there are no missing values in ia( ).
c                       0 otherwise.  (input/output)
c             ibitmap = 1 when there is a bitmap in ib( , ).
c                       0 otherwise.  (input)
c               missp = when missing points can be present in the data,
c                       they will have the value missp.  (input)
c               misss = the secondary missing value.  (input)
c              jmissp = flag indicating whether or not there
c                       are primary missing values in this routine.
c                       true = yes; false = no.  (logical) (output)
c              jmisss = flag indicating whether or not there
c                       are secondary missing values in this routine.
c                       true = yes; false = no.  (logical) (output)
c                 ier = contains any error messages generated by this
c                       routine. possible error codes are:
c                        901 - an invalid combination of iclean, 
c                              is5(10) (packing method), and is5(23)
c                              (missing values) was specified.
c                              see external documentation.
c            jer(j,k) = return status codes and severity levels
c                       (j=1,ndjer)(k=1,2).  values can come from
c                       subroutines; otherwise: 0 = good return.
c                       (input/output)
c               ndjer = dimension of jer( ).  (input)
c                kjer = number of values in jer( ).  (input/output)
c                   * = alternate error return.
c
c        local variables
c                   k = a looping/array indexing variable.
c
c        non system subroutines called
c          none 
c
      logical jmissp,jmisss
c
      dimension ia(nxy),ib(nxy),is5(ns5)
      dimension jer(ndjer,2)
c
      if(is5(23).eq.2)then
c
         if(misss.eq.missp)then
c              misss is equal to missp when both types of missings
c              are indicated.  set is5(23) to indicate only primary
c              missings.
            is5(23)=1
            call pk_trace(kfildo,jer,ndjer,kjer,916,1)
         endif
c  
      endif
c        
      jmissp=.false.
      jmisss=.false.
      ier=0
      nval=0
c
      if(iclean.eq.1)then
c
c           there are no missing values in the data field.
c           if this is simple packing, check the bit-map
c           to get a count of the number of valid values
c           in the field. if there is no bit-map, then
c           there must be no missing values.
c
         if(is5(10).eq.0)then
c
            if(ibitmap.eq.1)then
c
               do 10 k=1,nxy
                  if(ib(k).eq.1)nval=nval+1
 10            continue
c
            else
               nval=nxy
            endif
c
         else
            nval=nxy
         endif
c
      elseif((is5(10).ge.2).and.(is5(23).eq.1))then
c           the user must have supplied is5(23) when
c           is5(10).ge.2.
c
c           complex packing is being used and there can be
c           primary missing values. nval always equals nxy
c           with complex packing. if a bit-map was provided
c           then the data field has already been expanded
c           to include the missing values.
         nval=nxy
c
         do 30 k=1,nxy
c
            if(ia(k).eq.missp)then
               jmissp=.true.
               exit
            endif
c
 30      continue
c
         if(.not.jmissp)then
            iclean=1
            is5(23)=0
c              this overrides user input into is5(23).
            call pk_trace(kfildo,jer,ndjer,kjer,909,1)
         endif
c
      elseif((is5(10).ge.2).and.(is5(23).eq.2))then
c           the user must have supplied is5(23) when
c           is5(10).ge.2.
c
c           complex packing is being used and there can
c           be both primary and secondary missing values. 
c           nval always equals nxy with complex packing.
c           if a bit-map was provided then the data
c           field has already been expanded to include
c           the missing values.
         nval=nxy
c
         do 40 k=1,nxy
            if(ia(k).eq.missp)jmissp=.true.
            if(ia(k).eq.misss)jmisss=.true.
            if(jmissp.and.jmisss)exit 
 40      continue
c
         if(.not.jmissp.and..not.jmisss)then
            iclean=1
            is5(23)=0
c              this overrides user input into is5(23).
            call pk_trace(kfildo,jer,ndjer,kjer,909,1)
         else if(.not.jmisss)then
            is5(23)=1
c              this overrides user input into is5(23).
            call pk_trace(kfildo,jer,ndjer,kjer,910,1)
         endif 
c
      else
c
c           an invalid combination of iclean, is5(10), and is5(23)
c           has been specified.  the user must check the input to
c           the packer.
         ier=901
      endif
c
      if(ier.ne.0)return1
c
      return
      end
